<?php

use Drupal\node\Entity\Node;
use Drupal\ai_content_notifications\Services\AIContentNotificationService;
use Drupal\ai_contact_owner_tracking\AIContactOwnerTrackingStorage;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_cron().
 *
 * This is a cron job which works as a part of scheduled job ,
 * this function will add synonyms to published content if any synonyms found in content.
 */
function ai_content_notifications_cron() {
  
  $node_details = AIContentNotificationService::getListOfNodes();
  $nodes = [];
  foreach ($node_details as $node_detail) {
    $nodes[$node_detail->nid] = [
      'nid' => $node_detail->nid,
      'title' => $node_detail->title,
      'path' => AIContentNotificationService::getSiteBaseUrl() . \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $node_detail->nid),
      'author_id' =>  $node_detail->uid,
      'author_email' => $node_detail->mail,
      'last_updated' => format_date($node_detail->changed, 'custom', 'F d, Y h:i A')
    ];
  }
  
  if (!empty($nodes)) {
    $contributorList = AIContentNotificationService::getContributorsList(array_keys($nodes));
    foreach ($contributorList as $nid => $contributors) {
      if (isset($nodes[$nid])) {
        $nodes[$nid]['contributors'] = $contributors;
      }
    }
    
    $notifiedNodes = AIContentNotificationService::getNotifiedUsecasesByTime();
    $notified_list = [];
    
    $config = \Drupal::config('ai_content_notifications.settings');
    $max_limit = $config->get('max_notified_usecases');
    $count = 0;
    foreach ($nodes as $node) {
      if ($count >= $max_limit) {
        break;
      }
      if (!in_array($node['nid'], $notifiedNodes)) {
        // Send email to author and contributors
        AIContentNotificationService::notifyAuthorAndContributors('ai_content_notifications_notify_authors', ['node' => $node]);
        // Prepare array to log this notification.
        $entry = ['nid' => $node['nid'], 'timestamp' => \Drupal::time()->getCurrentTime()];
        // Check if it is a new entry or already exists
        if (AIContentNotificationService::checkIfUsecaseNotifiedBefore($node['nid'])) {
          // If exists, update the timestamp.
          AIContentNotificationService::update($entry);
        }
        else {
          // Otherwise, Insert the new entry.
          AIContentNotificationService::insert($entry);
        }
        $report_node_detail = [];
        $to = [];
        $report_node_detail = [
          'nid' => $node['nid'],
          'title' => $node['title'],
          'path' => $node['path'],
          'author' =>  $node['author_email'],
          'last_updated' => $node['last_updated']
        ];
        $to[] = $report_node_detail['author'];
        if (isset($node['contributors']) && !empty($node['contributors'])) {
          foreach($node['contributors'] as $cnt) {
            $to[] = $cnt;
          }
        }
        $report_node_detail['notified_email_ids'] = implode(',', $to);
        $notified_list[] = $report_node_detail;
        $count++;
      }
    }

    if (!empty($notified_list)) {
      $params['notified_list'] = $notified_list;
      // Send email to author and contributors
      AIContentNotificationService::notifyGalleryTeamWithAttachment('ai_content_notifications_notify_gallery_team', $params);
    }
  }
}



/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by \Drupal\Core\Utility\Token::replace() to set up
 * some additional tokens that can be used in email messages generated by
 * user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param array $options
 *   A keyed array of settings and flags to control the token replacement
 *   process. See \Drupal\Core\Utility\Token::replace().
 */
function ai_content_notifications_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['node']) && !empty($data['node'])) {
    $replacements['[usecase:title]'] = $data['node']['title'];
    $replacements['[usecase:url]'] = $data['node']['path'];
    $replacements['[usecase:author]'] = $data['node']['author_email'];
    $replacements['[usecase:changed]'] = $data['node']['last_updated'];
    $replacements['[usecase:title-link]'] = '<a href="' . $data['node']['path'] . '">' . $data['node']['title'] . '</a>';
  }
}

/**
 * Implements hook_mail().
 */
function ai_content_notifications_mail($key, &$message, $params) {
  $ai_content_notifications_settings = \Drupal::config('ai_content_notifications.settings');
  $options = array(
      'langcode' => $message['langcode'],
  );

  $from = isset($message['reply-to']) ? $message['reply-to'] : \Drupal::config('system.site')->get('mail');
  $message['from'] = $from;
  $message['Return-Path'] = $from;
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  $message['headers']['Return-Path'] = $from;
  $message['headers']['From'] = $from;
  $message['headers']['Sender'] = $from;

  $token_service = \Drupal::token();
  $token_options = ['langcode' => $message['langcode'], 'callback' => 'ai_content_notifications_mail_tokens', 'clear' => TRUE];

  switch ($key) {
    case 'ai_content_notifications_notify_authors':
      $msg = $ai_content_notifications_settings->get('email_body');
      $message['subject'] = PlainTextOutput::renderFromHtml($token_service->replace($ai_content_notifications_settings->get('email_subject'), $params, $token_options));
      $message['body'][] = Html::escape($token_service->replace($msg['value'], $params, $token_options));
      break;
      
    case 'ai_content_notifications_notify_gallery_team':
      $body_data = array (
        '#theme' => 'mail_to_ai_gallery_team',
        '#notified_list' => $params['notified_list']
      );
      $message['subject'] = '[Data and AI Gallery]: List of use case author/contributors notified.';
      $message['body'][] = \Drupal::service('renderer')->render($body_data);
      break;
  }
}


function ai_content_notifications_theme($existing, $type, $theme, $path) {
  return [
    'mail_to_ai_gallery_team' => [
      'template' => 'mail-to-ai-gallery-team',  // TWIG File
      'variables' => ['notified_list' => []],
    ],
  ];
}
